/*


    mixin

        作用: 复用组件中重复的数据和方法

        定义混入对象

             {
                 data(){
                     return {}
                 },
                 methods:{},
                 ...
             }

        使用混入对象

             全局混入: 在项目中的所有组件中都可以使用混入的数据和方法

                Vue.mixin(混入对象)

             局部混入: 只能在当前组件中使用

                {
                    mixins:[混入对象,混入对象]
                }


        冲突时: 

                数据: 组件数据为主
                方法: 组件方法为主
                生命周期钩子函数: 都会触发,混入的先执行,组件的后执行
    
    插件

        作用: 将指定的功能封装起来 

        定义

                {
                    install(Vue, ...args){

                        ... 

                        Vue.prototype的属性和方法,可以被当前项目中所有的组件访问

                    }
                }

        使用

             入口文件中. Vue.use(插件对象, 实参)


    自定义事件

        给组件注册一些自定义的事件

        <Test @自定义事件名="函数"></Test>


        组件实例.$on('事件名',事件处理函数)


        触发事件: 

        组件实例.$emit('事件名', 实参)

        组件实例.$off('事件名') 移除自定义事件
        组件实例.$once('事件名',事件处理函数) 事件触发一次




    全局事件总线

        原理: 给vue实例添加自定义事件. 因为项目中vue实例只有一个.然后通过编程,让所有的组件都可以访问到vue实例

        1. 让所有的组件都可以找到vue实例
        在入口文件中
        new Vue({
            ...,
            beforeCreate(){
                Vue.prototype.$bus = this
            }
        })

        2. 在需要接收数据的组件中,给vue绑定自定义事件

        this.$bus.$on('事件名',事件处理函数)

        3. 在需要传递数据的组件中,触发事件

        this.$bus.$emit('事件名',实参)

        组件卸载的时候,要移除事件


*/